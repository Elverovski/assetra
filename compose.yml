services:
  backend:
    image: elverovski/assetra-backend:v1
    build:
      context: ./ProjetFullStack-Backend
    container_name: assetra-backend
    ports:
      - "8585:8585"
    networks:
      - cloud
    depends_on:
      mariadb:
        condition: service_healthy
    environment:
      - SERVER_PORT=8585
      - SPRING_DATASOURCE_URL=jdbc:mariadb://mariadb:3306/assetra
      - SPRING_DATASOURCE_USERNAME=root
      - SPRING_DATASOURCE_PASSWORD=1234

  frontend:
    image: elverovski/assetra-frontend:v1
    build:
      context: ./ProjetFullStack-Frontend
    container_name: assetra-frontend
    ports:
      - "80:80"
    depends_on:
      - backend
    networks:
      - cloud

  mariadb:
    image: mariadb
    container_name: mariadb
    networks:
      - cloud
    healthcheck:
      test: ["CMD", "healthcheck.sh", "--connect", "--innodb_initialized"]
      start_period: 5s
      interval: 5s
      timeout: 5s
      retries: 3
    volumes:
      - db:/var/lib/mysql
      - ./db-seed/data.sql:/docker-entrypoint-initdb.d/data.sql
    environment:
      - MYSQL_ROOT_PASSWORD=1234
      - MYSQL_DATABASE=assetra
      
  portainer:
    image: portainer/portainer-ce:alpine
    container_name: portainer
    restart: unless-stopped
    networks: 
        - cloud
    # ports:
    #   - "9000:9000"
    labels:
    - 'traefik.enable=true'
    - 'traefik.http.routers.portainer.rule=Host(`portainer.${MY_DOMAIN}`)'
    - 'traefik.http.routers.portainer.entryPoints=websecure'
    - "traefik.http.services.frontend.loadbalancer.server.port=9000"
    - "traefik.http.routers.frontend.service=frontend"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - portainer_data:/data

  jellyfin:
    image: jellyfin/jellyfin:latest
    container_name: jellyfin
    restart: unless-stopped
    networks: 
      - cloud
    # ports:
    #   - "8096:8096"
    labels:
    - 'traefik.enable=true'
    - 'traefik.http.routers.jellyfin.rule=Host(`jellyfin.${MY_DOMAIN}`)'
    - 'traefik.http.routers.jellyfin.entryPoints=websecure'
    environment:
      - TZ=America/Montreal
    volumes:
      - jellyfin_data:/config
      - /mnt/media/Movies:/movies
      - /mnt/media/TV:/tv

  proxy:
    image: traefik
    container_name: traefik
    restart: unless-stopped
    networks: 
        - cloud
    command:
      - "--log.level=DEBUG"
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--certificatesresolvers.letsencrypt.acme.dnschallenge=true"
      - "--certificatesresolvers.letsencrypt.acme.dnschallenge.provider=duckdns"
      - "--certificatesresolvers.letsencrypt.acme.email=mail@mail.com"
      - "--certificatesresolvers.letsencrypt.acme.dnschallenge.disablePropagationCheck=true"
      - "--certificatesresolvers.letsencrypt.acme.dnschallenge.resolvers=1.1.1.1:53,8.8.8.8:53"
      - "--certificatesresolvers.letsencrypt.acme.storage=/letsencrypt/acme.json"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.web.http.redirections.entrypoint.to=websecure"
      - "--entrypoints.web.http.redirections.entrypoint.scheme=https"
      - "--entrypoints.websecure.address=:443"
      - "--entrypoints.websecure.http.tls=true"
      - "--entrypoints.websecure.http.tls.certResolver=letsencrypt"
      - "--entrypoints.websecure.http.tls.domains[0].main=${MY_DOMAIN}"
      - "--entrypoints.websecure.http.tls.domains[0].sans=*.${MY_DOMAIN}"
    volumes:
      - "../data/traefik/letsencrypt:/letsencrypt"
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
    labels:
      - 'traefik.enable=true'
      - 'traefik.http.routers.api.rule=Host(`${MY_DOMAIN}`)'
      - 'traefik.http.routers.api.entryPoints=websecure'
      - 'traefik.http.routers.api.service=api@internal'
    ports:
      - "443:443"
      - "80:80"
    environment:
      - "DUCKDNS_TOKEN=${DUCKDNS_TOKEN}"

volumes:
  portainer_data:
  db:
  jellyfin_data:

networks:
  cloud: 
      driver: bridge
